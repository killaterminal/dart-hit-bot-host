const TelegramBot = require('node-telegram-bot-api');
const { connectToDatabase, getClient } = require('./database');

const botToken = '6404706952:AAGRRkrNxa_XODYZ8B6XkKnGaHkFNJEDlA4';
const bot2 = new TelegramBot(botToken, { polling: true });

connectToDatabase();

const userCollectionName = 'partners';
const dbClient = getClient();
const userCollection = dbClient.db().collection(userCollectionName);

const availableCommands = ['/addmamont', '/mymamonts'];

async function checkPartnerRegistration(userId) {
    const existingUser = await userCollection.findOne({ userId: userId });
    return existingUser !== null;
}

availableCommands.forEach(command => {
    bot2.onText(new RegExp(`^${command}$`), async (msg) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        const isUserRegistered = await checkPartnerRegistration(userId);
        if (isUserRegistered) {
            switch (command) {
                case '/addmamont':
                    break;
                case '/mymamonts':
                    break;
                default:
                    break;
            }
        } else {
            bot2.sendMessage(chatId, '–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.');
        }
    });
});

async function contactListener(msg) {
    const userId = msg.from.id;
    const chatId = msg.chat.id;
    const phoneNumber = msg.contact.phone_number;

    const isUserRegistered = await checkPartnerRegistration(userId);
    if (!isUserRegistered) {
        await userCollection.insertOne({
            userId: userId,
            phoneNumber: phoneNumber,
            username: msg.from.username,
            name: msg.from.first_name,
            referals: 0
        });
        bot2.sendMessage(chatId, `–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, ${msg.from.first_name}! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –º–∞–º–æ–Ω—Ç–∞`, {
            reply_markup: {
                remove_keyboard: true
            }
        });
    } else {
        bot2.sendMessage(chatId, `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, ${msg.from.first_name}! –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.`);
    }
}

bot2.on('contact', contactListener);

const checkCollectionName = 'users';
const checkCollection = dbClient.db().collection(checkCollectionName);

async function checkAndUpdateReferals(userId, searchValue) {
    const user = await checkCollection.findOne({ phoneNumber: searchValue });

    if (!user) {
        return false;
    }
    if (user.hasBeenCounted) {
        return false;
    }

    console.log(`mamonttt ----  ${userId}`);
    await userCollection.updateOne(
        { userId: userId },
        { $inc: { referals: 1 } }
    );
    await checkCollection.updateOne(
        { phoneNumber: searchValue },
        { $set: { hasBeenCounted: true } }
    );
    return true;
}

async function search(userId, searchValue) {
    const isReferalUpdated = await checkAndUpdateReferals(userId, searchValue);
    if (isReferalUpdated) {
        console.log('–°—á–µ—Ç—á–∏–∫ referals –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω.');
        return true;
    } else {
        console.log('–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ users.');
        return false;
    }
}

bot2.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    const isUserRegistered = await checkPartnerRegistration(userId);

    if (!isUserRegistered) {
        bot2.sendMessage(chatId, '–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ:', {
            reply_markup: {
                keyboard: [
                    [{
                        text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
                        request_contact: true
                    }]
                ],
                resize_keyboard: true,
                one_time_keyboard: true
            }
        });
    } else {
        bot2.sendMessage(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, –≤—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.');
    }
});

bot2.onText(/\/addmamont/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const user = await userCollection.findOne({ userId: userId });

    if (user) {
        bot2.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–∞–º–æ–Ω—Ç–∞\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n–†–æ—Å—Å–∏—è üá∑üá∫ - *7*1234567890\n–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω üá∫üáø - *998*123456789\n–ö–∏—Ä–≥–∏–∑–∏—è (–ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω) üá∞üá¨ - *996*123456789', {
            reply_markup: {
                force_reply: true,
            },
            parse_mode: 'Markdown'
        }).then(sentMessage => {
            bot2.on('message', async (msg) => {
                const receivedMessageChatId = msg.chat.id;
                const receivedMessageUserId = msg.from.id;

                if (
                    receivedMessageChatId === chatId &&
                    receivedMessageUserId === userId &&
                    msg.reply_to_message &&
                    msg.reply_to_message.message_id === sentMessage.message_id
                ) {
                    const searchValue = msg.text.trim();

                    if (await search(userId, searchValue) === true)
                        bot2.sendMessage(chatId, `–ú–∞–º–æ–Ω—Ç –∑–∞—Å—á–∏—Ç–∞–Ω`);
                    else
                        bot2.sendMessage(chatId, '–ú–∞–º–æ–Ω—Ç —É–∂–µ –±—ã–ª –∑–∞—Å—á–∏—Ç–∞–Ω');
                }
            });
        });
        bot2.sendMessage(chatId, '*–ü–†–ò–ú–ï–ß–ê–ù–ò–ï*\n–í–∞—à –º–∞–º–æ–Ω—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω', { parse_mode: 'Markdown' });

    } else {
        bot2.sendMessage(chatId, '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.');
    }
});

bot2.onText(/\/mymamonts/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const user = await userCollection.findOne({ userId: userId });

    if (user) {
        bot2.sendMessage(chatId, `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã—Ö –º–∞–º–æ–Ω—Ç–æ–≤: ${user.referals}`);
    } else {
        bot2.sendMessage(chatId, '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.');
    }
});